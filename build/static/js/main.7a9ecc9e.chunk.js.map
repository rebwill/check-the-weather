{"version":3,"sources":["components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","role","aria-label","Component","App","props","handleChange","e","setState","zipCode","target","value","handleSubmit","preventDefault","fetchWeather","zipCodeParam","state","console","log","fetch","then","res","json","data","isLoaded","weather","error","this","message","onSubmit","type","onChange","location","name","region","current","temp_f","humidity","feelslike_f","wind_mph","gust_mph","wind_dir","cloud","precip_in","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4NA0BeA,E,iLAtBX,OACE,yBAAKC,UAAU,UACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,sBACsB,IACpB,0BAAMC,KAAK,MAAMC,aAAW,eAA5B,uBAIF,6BACE,wBAAIH,UAAU,sBACZ,wBAAIA,UAAU,sBACZ,uBAAGA,UAAU,WAAWC,KAAK,UAA7B,iB,GAbOG,aCkJNC,G,kBA5Ib,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SAZjB,EAenBC,aAAe,SAAAL,GAEbA,EAAEM,iBACF,EAAKC,gBAlBY,EAqBnBA,aAAe,WACb,IAAIC,EAAe,EAAKC,MAAMP,QAC9BQ,QAAQC,IAAI,EAAKF,MAAMP,SACvBU,MAAM,mFAAD,OACgFJ,IAElFK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GACE,EAAKf,SAAS,CACZgB,UAAU,EACVC,QAASF,OAGb,SAAAG,GACET,QAAQC,IAAIQ,OAjClB,EAAKV,MAAQ,CACXU,MAAO,KACPF,UAAU,EACVC,QAAS,GACThB,QAAS,GAPM,E,sEAyCT,IAAD,EAC8BkB,KAAKX,MAAlCU,EADD,EACCA,MAAOF,EADR,EACQA,SAAUC,EADlB,EACkBA,QACzB,OAAIC,EACK,uCAAaA,EAAME,SAChBJ,EAsBDA,GAAYC,EAEnB,6BACE,kBAAC,EAAD,MACA,yBAAK1B,UAAU,wBACb,yBAAKA,UAAU,qBACb,0BAAM8B,SAAUF,KAAKf,aAAcb,UAAU,gBAC3C,0FAGA,2BACEA,UAAU,cACV+B,KAAK,OACLnB,MAAOgB,KAAKX,MAAMP,QAClBsB,SAAUJ,KAAKrB,eAEjB,2BAAOP,UAAU,aAAa+B,KAAK,SAASnB,MAAM,YAEpD,yBAAKZ,UAAU,eACb,yDAC6B0B,EAAQO,SAASC,KAD9C,IACqD,IAClDR,EAAQO,SAASE,OAFpB,KAIA,2BACE,iDACCT,EAAQU,QAAQC,OAFnB,QAGE,6BACA,8CACCX,EAAQU,QAAQE,SALnB,IAK6B,6BAC3B,gDACCZ,EAAQU,QAAQG,YAPnB,QAQE,6BACA,gDACCb,EAAQU,QAAQI,SAVnB,OAWE,6BACA,qDACCd,EAAQU,QAAQK,SAbnB,OAcE,6BACA,oDACCf,EAAQU,QAAQM,SACjB,6BACA,iDACChB,EAAQU,QAAQO,MAnBnB,IAmB0B,6BACxB,mDACCjB,EAAQU,QAAQQ,UArBnB,eA8BR,6BACE,kBAAC,EAAD,MACA,+DACA,0BAAMd,SAAUF,KAAKf,cACnB,6CAEE,2BACEkB,KAAK,OACLnB,MAAOgB,KAAKX,MAAMP,QAClBsB,SAAUJ,KAAKrB,gBAGnB,2BAAOwB,KAAK,SAASnB,MAAM,aArF/B,6BACE,kBAAC,EAAD,MACA,yBAAKZ,UAAU,wBACb,yBAAKA,UAAU,qBACb,0BAAM8B,SAAUF,KAAKf,aAAcb,UAAU,gBAC3C,0FAGA,2BACEA,UAAU,cACV+B,KAAK,OACLnB,MAAOgB,KAAKX,MAAMP,QAClBsB,SAAUJ,KAAKrB,eAEjB,2BAAOP,UAAU,aAAa+B,KAAK,SAASnB,MAAM,mB,GA9DhDR,cCKEyC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.7a9ecc9e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar\">\n        <a className=\"navbar-title\" href=\"/\">\n          What's the Weather?{\" \"}\n          <span role=\"img\" aria-label=\"cloud emoji\">\n            üå¶Ô∏è\n          </span>\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item nav-about\">\n              <a className=\"nav-link\" href=\"/about\">\n                ABOUT\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport \"./styles/index.scss\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n// import Weather from \"./components/weather\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      weather: [],\n      zipCode: 0\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ zipCode: e.target.value });\n  };\n\n  handleSubmit = e => {\n    // alert(\"A zipcode was submitted: \" + this.state.zipCode);\n    e.preventDefault();\n    this.fetchWeather();\n  };\n\n  fetchWeather = () => {\n    let zipCodeParam = this.state.zipCode;\n    console.log(this.state.zipCode);\n    fetch(\n      `http://api.weatherapi.com/v1/current.json?key=5b42e62dd43941e18fd195730191712&q=${zipCodeParam}`\n    )\n      .then(res => res.json())\n      .then(\n        data => {\n          this.setState({\n            isLoaded: true,\n            weather: data\n          });\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  };\n\n  render() {\n    const { error, isLoaded, weather } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return (\n        <div>\n          <Navbar />\n          <div className=\"background-container\">\n            <div className=\"content-container\">\n              <form onSubmit={this.handleSubmit} className=\"zipcode-form\">\n                <h2>\n                  Enter a US zipcode here to get current weather conditions.\n                </h2>\n                <input\n                  className=\"input-field\"\n                  type=\"text\"\n                  value={this.state.zipCode}\n                  onChange={this.handleChange}\n                />\n                <input className=\"submit-btn\" type=\"submit\" value=\"Submit\" />\n              </form>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (isLoaded && weather) {\n      return (\n        <div>\n          <Navbar />\n          <div className=\"background-container\">\n            <div className=\"content-container\">\n              <form onSubmit={this.handleSubmit} className=\"zipcode-form\">\n                <h2>\n                  Enter a US zipcode here to get current weather conditions.\n                </h2>\n                <input\n                  className=\"input-field\"\n                  type=\"text\"\n                  value={this.state.zipCode}\n                  onChange={this.handleChange}\n                />\n                <input className=\"submit-btn\" type=\"submit\" value=\"Submit\" />\n              </form>\n              <div className=\"results-box\">\n                <h2>\n                  Here's what it's doing in {weather.location.name},{\" \"}\n                  {weather.location.region}:\n                </h2>\n                <p>\n                  <strong>Temperature: </strong>\n                  {weather.current.temp_f}¬∞F\n                  <br />\n                  <strong>Humidity: </strong>\n                  {weather.current.humidity}%<br />\n                  <strong>Feels like: </strong>\n                  {weather.current.feelslike_f}¬∞F\n                  <br />\n                  <strong>Wind speed: </strong>\n                  {weather.current.wind_mph} mph\n                  <br />\n                  <strong>Wind gust speed: </strong>\n                  {weather.current.gust_mph} mph\n                  <br />\n                  <strong>Wind direction: </strong>\n                  {weather.current.wind_dir}\n                  <br />\n                  <strong>Cloud cover: </strong>\n                  {weather.current.cloud}%<br />\n                  <strong>Precipitation: </strong>\n                  {weather.current.precip_in} inches\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Navbar />\n          <p>Please enter a valid US zipcode.</p>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              US Zipcode:\n              <input\n                type=\"text\"\n                value={this.state.zipCode}\n                onChange={this.handleChange}\n              />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n\n// {weather.temp_f}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}